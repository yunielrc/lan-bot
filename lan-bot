#!/bin/bash

##  Bash settings
# abort on nonzero exitstatus
set -o errexit
# abort on unbound variable
 set -o nounset
# don't hide errors within pipes
 set -o pipefail
# debug
# set -o xtrace
##

## Global Variables
# shellcheck disable=2034,2155
readonly ENTRY_POINT="${ENTRY_POINT:-"$(basename "${0}")"}"
# shellcheck disable=2034,2155
readonly BASE_PATH="${BASE_PATH:-"$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"}"
readonly TASK_DIR="${TASK_DIR:-"${BASE_PATH}/tasks"}"
# shellcheck disable=2034,2155
readonly SERVICES_DIR="${BASE_PATH}/services"
# shellcheck disable=2034,2155
readonly ETC_DIR="${BASE_PATH}/etc"
# shellcheck disable=2034,2155
readonly LIB_DIR="${BASE_PATH}/lib"
##

## Includes
# shellcheck disable=1090
source "${BASE_PATH}/lib/exit-codes.bash"
# shellcheck disable=1090
source "${BASE_PATH}/lib/utils.bash"
##

# IFS=$'\t\n'   # Split on newlines and tabs (but not on spaces)

## Functions

usage(){
  cat <<HELPHEADER
Usage:	${ENTRY_POINT} [OPTIONS] [TASK]

LAN BOT, ejecuta tareas que automatizan procesos humanos en la red. 

Options:
  -v, --version            Print version information and quit
  -h, --help               Print help information and quit

Tasks:
HELPHEADER

for task in "${TASK_DIR}/"*; do
  local taskname="${task%.bash}"
  # shellcheck disable=2155
  local tasktext=$(head --lines=1 "$task")
  
  printf "%-25s %-20s\n" "${taskname##*/}" "${tasktext#\#}"
done

cat <<HELPFOOTER

Output:
Tarea        T de ejecución    Código     Mensaje
task-xxx     3.0(s)             0          OK

Run '${ENTRY_POINT} TASK --help' for more information on a task.
HELPFOOTER
}

version(){
  echo "${ENTRY_POINT} version $(cat "${BASE_PATH}/VERSION")"
}

print_run_task_result() {
  local -r taskName="$1" runTime="$2" exitCode="$3" exitMsg="$4"
  printf "%-25s %-4.1f(s)  %-5u %s\n" "$taskName" "$runTime" "$exitCode" "$exitMsg"
}

#######################################
# Ejecuta una tarea
#
# Arguments:
#   1: task to run
# Globals:
#   None
# Returns:
#   79: EX_ARGERR
#######################################
run_task(){
  local -r task="$1"
  shift
  local -r taskFullPath="${TASK_DIR}/${task}.bash"

  if [ ! -f "$taskFullPath" ]; then
    err "Tarea no valida: '${task}'" "$EX_ARGERR"
  fi
  # shellcheck disable=1090
  source "${taskFullPath}"
  local -r time1=$(date +%s)
  local code=0
  local msg=''
  msg="$("${task}.run" "$@" 2>&1)" || code=$?
  [[ -z "$msg" ]] && msg='OK'
  local -r time2=$(date +%s)

  print_run_task_result "$task" "$(( time2 - time1 ))" "$code" "$msg"

  return $code
}

#

main() {

  if [[ "$#" == 0 ]]; then
    set -- '-h'
  fi

  case "$1" in
    -v|--version)
      version
    ;;
    -h|--help|'')
      usage
    ;;
    -*)
    usage
    exit 1
    ;;
    *)
      run_task "$@"
    ;;
  esac
}

main "$@"
